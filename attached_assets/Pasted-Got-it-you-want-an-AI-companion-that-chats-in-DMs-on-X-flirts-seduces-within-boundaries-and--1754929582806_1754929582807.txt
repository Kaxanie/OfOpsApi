Got it — you want an **AI companion** that chats in DMs on X, flirts/seduces within boundaries, and can send creator-approved content, take bookings, and close payments — all while staying compliant, safe, and reliable. Here’s how to build that layer on top of the starter I gave you.

# System design for “Seductive AI” (safe-by-design)

## 1) Persona + guardrails

**Goal:** sound like the creator, never cross legal/policy lines, and be transparent enough to avoid platform trouble.

**Persona object**

* `name`, `bio`, `voice_keywords`
* `do_say`: topics, slang, style
* `dont_say`: banned themes, explicit verbs, illegal acts
* `offer_menu`: items, prices, delivery windows
* `disclosure`: short label like “Assistant for <Creator>” in the welcome DM, to avoid deception flags

**Endpoint**

* `POST /v1/persona` create/update persona
* `GET /v1/persona/:creator_id`

**LLM prompt skeleton (non-explicit, upsell-ready)**

```
System:
You are {name}, an affectionate, playful assistant for {Creator}. 
Flirt with warmth, never explicit, never promise in-person meetings. 
Offer priced options only from offer_menu. 
Respect user’s boundaries and stop words. 
If user requests illegal, minors, or IRL meetups, escalate.

Developer:
Tone keywords: {voice_keywords}
Do: tease, praise, curiosity, light innuendo that stays PG-13.
Don’t: graphic sexual detail, age play, coercion, illegal topics.

Tools: offer_menu(), create_payment_link(), propose_times(), send_media()
```

## 2) Safety pipeline (hard requirement)

* **Classifier → Rules → Redaction/Escalation**
* Block / escalate for: mentions of age under 18, threats, doxxing, illegal requests, IRL sex.
* Maintain **audit log** per turn: input, classification, policy decision, output.
* Per-fan **consent & age affirmation** gate before any romantic/NSFW flirting.

**Endpoints**

* `POST /v1/moderation/check` (internal)
* `POST /v1/consent/affirm` → stores “18+, ok to receive romantic content” with timestamp and IP hash

## 3) Memory & personalization

* **Fan profile:** `fan_id, handle, timezone, prefs, spend_tier, last_purchases, boundaries`
* **Thread memory:** last N turns summary, sentiments, safe words
* **Soft traits:** “likes praise,” “responds to scarcity,” “preferred content: selfies”

**Endpoints**

* `GET /v1/fans/:id`
* `PATCH /v1/fans/:id` to update tags, prefs
* `POST /v1/ai/remember` (internal) to append structured notes after each chat

## 4) Seduction ladder (ethical funnel)

1. **Consent & vibe check** → light banter, opt-in
2. **Connection** → playful questions, mirror user vibe, suggest menu softly
3. **Offer** → limited-time custom, price shown via Stripe link
4. **Post-purchase care** → thank-you, teaser line, invite to next tier (e.g., 1:1 chat pack)
5. **Cool-down** → don’t spam, schedule drip with quiet hours

**Automations**

* `welcome_sequence` after follow
* `abandoned_checkout` reminder if no payment in 24h
* `vip_upgrade` if spend\_tier crosses thresholds

## 5) Content library & delivery

Only send **pre-approved files** from the creator. Watermark and log every send.

**Objects**

* `content_items`: id, type image video audio, url, caption\_template, allowed\_contexts, price or “free teaser”
* `playlists`: bundles for scripted drips

**Endpoints**

* `POST /v1/content` add item, returns signed delivery handle
* `POST /v1/messages` with `type:"media", content_id:"..."` (already scaffolded; you’ll add the media path)
* Worker does: fetch signed URL, attach to DM, update audit + analytics

## 6) Payments & bookings (already scaffolded)

* Stripe Checkout link → webhook → unlock message or calendar invite.
* For “chat packs”, issue **time-boxed DM access**: e.g., “15 minutes live typing,” auto-start timers, send reminders, auto-close with thank-you.

**Extra endpoints**

* `POST /v1/products` define SKUs (custom video, call, chat pack)
* `POST /v1/bookings/:id/confirm` → creates checkout link, on success issues ICS + DM
* `POST /v1/access/grant` for chat-pack timers

## 7) Analytics (what matters)

* Revenue by segment: new vs returning, menu item performance
* Conversion per script variant (A/B of opening lines)
* DM response latency, opt-in rates, complaint rate
* Safe-guard stats: blocks, escalations, refunds

**Endpoints**

* `GET /v1/analytics/revenue?window=7d`
* `GET /v1/analytics/funnel?stage=welcome`
* `GET /v1/analytics/safety`

---

# Concrete additions to the Replit starter

## New routes to add

* `src/routes/persona.ts`
* `src/routes/content.ts`
* `src/routes/ai.ts` (generate replies, calls moderation, tools)
* `src/routes/consent.ts`
* `src/routes/analytics.ts`

## Service modules

* `src/services/llm.ts` — wraps model, includes prompt + tool calls
* `src/services/moderation.ts` — regex + lightweight classifier, blocklist, escalation queue
* `src/services/media.ts` — S3-style uploads, watermark function, signed URLs
* `src/services/audit.ts` — append logs, retrieve by conversation

## Message flow (DM)

1. Inbound DM webhook (poll or periodic fetch) hits `POST /v1/ai/reply`.
2. `moderation.check(input)` → block/escalate if needed.
3. `ai.generate(system + persona + memory + safe_rules)` returns draft + tool calls (offer, paylink, send\_media).
4. Execute tools, insert final message into `/v1/messages` pipeline (immediate or scheduled).
5. `ai.remember()` updates fan preferences and thread summary.

---

# Sample JSONs you can copy now

**Create persona**

```json
POST /v1/persona
{
  "creator_id":"cr_123",
  "name":"Nova",
  "bio":"soft-spoken, playful, attentive",
  "voice_keywords":["warm","teasing","curious","polite"],
  "do_say":["compliments","questions","light innuendo","gratitude"],
  "dont_say":["graphic sexual detail","age references","promises of IRL intimacy"],
  "offer_menu":[
    {"sku":"custom_60s","label":"Custom 60s video","price_cents":4000},
    {"sku":"chat_15m","label":"15-min live DM chat","price_cents":2500}
  ],
  "disclosure":"You’re chatting with Nova, my assistant 💬"
}
```

**Send paid offer**

```json
POST /v1/payments/link
{
  "fan_id":"fan_789",
  "line_items":[{"name":"Custom 60s video","amount_cents":4000,"quantity":1}],
  "metadata":{"creator_id":"cr_123","unlock_message_id":"msg_555"}
}
```

**Consent gate**

```json
POST /v1/consent/affirm
{
  "fan_id":"fan_789",
  "affirmations":["I am 18+","I consent to romantic messages"]
}
```

**Schedule a flirty check-in**

```json
POST /v1/messages
{
  "creator_id":"cr_123",
  "fan_x_user_id":"x_12345",
  "type":"text",
  "body":"Thinking of you. Want me to tailor something just for you?",
  "scheduled_at":"2025-08-12T19:00:00Z"
}
```

---

# Policy & ethics checklist (use this verbatim in your README)

* Disclose assistant status on first contact.
* Age-affirmation gate before any romantic content.
* No explicit sexual detail, no illegal content, no IRL sex arrangements.
* Respect stop words: “stop,” “no,” “unsubscribe” end automation.
* Log every automated action; enable user report/escalation.

---

# Next steps I can implement for you in the repo

1. Add **/persona, /ai, /content, /consent, /analytics** routes with Zod schemas.
2. Add `services/llm.ts` with the safe prompt and tool handlers.
3. Add `services/moderation.ts` with rules, red flags, and escalation queue.
4. Wire media delivery + watermarking to the DM sender.
5. Add **A/B opening lines** and basic analytics.

Say the word, and I’ll drop these files into your Replit starter so you can hit “Run” and test end-to-end.
